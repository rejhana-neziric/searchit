// <auto-generated />
using System;
using JobSearchingWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobSearchingWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241116121224_Poruke")]
    partial class Poruke
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobSearchingWebApp.Database.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumModificiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Drzava")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kursevi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Objavljen")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfesionalniSazetak")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TehnickeVjestine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vjestine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.ToTable("CV");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVEdukacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("EdukacijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("EdukacijaId");

                    b.ToTable("CVEdukacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVURL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("URLId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("URLId");

                    b.ToTable("CVURL");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVZaposlenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("ZaposlenjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("ZaposlenjeId");

                    b.ToTable("CVZaposlenje");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Edukacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DatumPocetka")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DatumZavrsetka")
                        .HasColumnType("date");

                    b.Property<string>("Grad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivSkole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Edukacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Iskustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Iskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatSpaseneKompanije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Spasen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("KompanijaId");

                    b.ToTable("KandidatSpaseneKompanije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatSpaseniOglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<bool>("Spasen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("OglasId");

                    b.ToTable("KandidatSpaseniOglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatiOglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<bool>("Spasen")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("KandidatId");

                    b.HasIndex("OglasId");

                    b.ToTable("KandidatiOglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KompanijeKandidati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumRazgovora")
                        .HasColumnType("datetime2");

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("KompanijaId");

                    b.ToTable("KompanijeKandidati");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObrisan")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UlogaId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KorisnikNotifikacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumPrimanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotifikacijaId")
                        .HasColumnType("int");

                    b.Property<bool>("Pogledano")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("NotifikacijaId");

                    b.ToTable("KorisnikNotifikacije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Lokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Notifikacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifikacije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Oglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumModificiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsObrisan")
                        .HasColumnType("bit");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NazivPozicije")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("Objavljen")
                        .HasColumnType("bit");

                    b.Property<string>("Plata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RokPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipPosla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KompanijaId");

                    b.ToTable("Oglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OglasIskustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IskustvoId")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IskustvoId");

                    b.HasIndex("OglasId");

                    b.ToTable("OglasIskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OglasLokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaId");

                    b.HasIndex("OglasId");

                    b.ToTable("OglasLokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OpisOglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefiti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kvalifikacija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MinimumGodinaIskustva")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<string>("OpisPozicije")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PrefiraneGodineIskstva")
                        .HasColumnType("int");

                    b.Property<string>("Vjestine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OglasId")
                        .IsUnique();

                    b.ToTable("OpisOglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Poruka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeSlanja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.URL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Putanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("URL");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloge");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Zaposlenje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DatumPocetka")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DatumZavrsetka")
                        .HasColumnType("date");

                    b.Property<string>("NazivKompanije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivPozicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Zaposlenje");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Kandidat", b =>
                {
                    b.HasBaseType("JobSearchingWebApp.Database.Korisnik");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MjestoPrebivalista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Zvanje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Kandidati");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Kompanija", b =>
                {
                    b.HasBaseType("JobSearchingWebApp.Database.Korisnik");

                    b.Property<string>("BrojZaposlenih")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaOsnivanja")
                        .HasColumnType("int");

                    b.Property<string>("KratkiOpis")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("LokacijaId");

                    b.ToTable("Kompanije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CV", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVEdukacija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.CV", "CV")
                        .WithMany("Edukacije")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Edukacija", "Edukacija")
                        .WithMany("CVs")
                        .HasForeignKey("EdukacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Edukacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVURL", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.CV", "CV")
                        .WithMany("URLovi")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.URL", "URL")
                        .WithMany("CVs")
                        .HasForeignKey("URLId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("URL");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CVZaposlenje", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.CV", "CV")
                        .WithMany("Zaposlenja")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Zaposlenje", "Zaposlenje")
                        .WithMany("CVs")
                        .HasForeignKey("ZaposlenjeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Zaposlenje");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatSpaseneKompanije", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Kompanija", "Kompanija")
                        .WithMany("KandidatSpaseneKompanije")
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatSpaseniOglasi", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Oglas", "Oglas")
                        .WithMany("KandidatSpaseniOglasi")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KandidatiOglasi", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Oglas", "Oglas")
                        .WithMany()
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Kandidat");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KompanijeKandidati", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Kompanija", "Kompanija")
                        .WithMany()
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Korisnik", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.KorisnikNotifikacije", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Notifikacija", "Notifikacija")
                        .WithMany()
                        .HasForeignKey("NotifikacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Notifikacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Oglas", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Kompanija", "Kompanija")
                        .WithMany("Oglasi")
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OglasIskustvo", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Iskustvo", "Iskustvo")
                        .WithMany("OglasIskustvo")
                        .HasForeignKey("IskustvoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Oglas", "Oglas")
                        .WithMany("OglasIskustvo")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Iskustvo");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OglasLokacija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Lokacija", "Lokacija")
                        .WithMany("OglasLokacija")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Oglas", "Oglas")
                        .WithMany("OglasLokacija")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lokacija");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.OpisOglas", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Oglas", "Oglas")
                        .WithOne("OpisOglas")
                        .HasForeignKey("JobSearchingWebApp.Database.OpisOglas", "OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Kandidat", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("JobSearchingWebApp.Database.Kandidat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Kompanija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Database.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("JobSearchingWebApp.Database.Kompanija", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Database.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.CV", b =>
                {
                    b.Navigation("Edukacije");

                    b.Navigation("URLovi");

                    b.Navigation("Zaposlenja");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Edukacija", b =>
                {
                    b.Navigation("CVs");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Iskustvo", b =>
                {
                    b.Navigation("OglasIskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Lokacija", b =>
                {
                    b.Navigation("OglasLokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Oglas", b =>
                {
                    b.Navigation("KandidatSpaseniOglasi");

                    b.Navigation("OglasIskustvo");

                    b.Navigation("OglasLokacija");

                    b.Navigation("OpisOglas")
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.URL", b =>
                {
                    b.Navigation("CVs");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Zaposlenje", b =>
                {
                    b.Navigation("CVs");
                });

            modelBuilder.Entity("JobSearchingWebApp.Database.Kompanija", b =>
                {
                    b.Navigation("KandidatSpaseneKompanije");

                    b.Navigation("Oglasi");
                });
#pragma warning restore 612, 618
        }
    }
}
