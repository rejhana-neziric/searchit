// <auto-generated />
using System;
using JobSearchingWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobSearchingWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240727211047_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobSearchingWebApp.Models.AutentifikacijaToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IPAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeEvidentiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("AutentifikacijaToken");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisProfila")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CV");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVJezici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("JezikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("JezikId");

                    b.ToTable("CVJezici");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVTehnologije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("TehnologijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("TehnologijaId");

                    b.ToTable("CVTehnologije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVVjestine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("VjestinaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("VjestinaId");

                    b.ToTable("CVVjestine");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Iskustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Iskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Jezik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jezici");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatSpaseneKompanije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Spasen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("KompanijaId");

                    b.ToTable("KandidatSpaseneKompanije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatSpaseniOglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<bool>("Spasen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("OglasId");

                    b.ToTable("KandidatSpaseniOglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatiOglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("OglasId");

                    b.ToTable("KandidatiOglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KompanijaLokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KompanijaId");

                    b.HasIndex("LokacijaId");

                    b.ToTable("KompanijaLokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KompanijeKandidati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumRazgovora")
                        .HasColumnType("datetime2");

                    b.Property<string>("KandidatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KandidatId");

                    b.HasIndex("KompanijaId");

                    b.ToTable("KompanijeKandidati");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UlogaId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KorisnikNotifikacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumPrimanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotifikacijaId")
                        .HasColumnType("int");

                    b.Property<bool>("Pogledano")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("NotifikacijaId");

                    b.ToTable("KorisnikNotifikacije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Lokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Notifikacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifikacije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Oglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumModificiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime2");

                    b.Property<string>("KompanijaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NazivPozicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Plata")
                        .HasColumnType("float");

                    b.Property<DateTime>("RokPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("TipPosla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KompanijaId");

                    b.ToTable("Oglasi");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OglasIskustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IskustvoId")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IskustvoId");

                    b.HasIndex("OglasId");

                    b.ToTable("OglasIskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OglasLokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LokacijaId");

                    b.HasIndex("OglasId");

                    b.ToTable("OglasLokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OpisKompanije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojOtvorenihPozicija")
                        .HasColumnType("int");

                    b.Property<int>("BrojZaposlenika")
                        .HasColumnType("int");

                    b.Property<string>("OpisPoslovanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpisiKompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OpisOglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefiti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kvalifikacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumGodinaIskustva")
                        .HasColumnType("int");

                    b.Property<int>("OglasId")
                        .HasColumnType("int");

                    b.Property<string>("OpisPozicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrefiraneGodineIskstva")
                        .HasColumnType("int");

                    b.Property<string>("Vjestine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OglasId")
                        .IsUnique();

                    b.ToTable("OpisOglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.RadnoIskustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("NazivKompanije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivPozicija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.ToTable("RadnoIskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojZvijezdica")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumVrijemeRecenzije")
                        .HasColumnType("datetime2");

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pozicija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Tehnologija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tehnologije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Tema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teme");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloge");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Vjestina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vjestine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Kandidat", b =>
                {
                    b.HasBaseType("JobSearchingWebApp.Models.Korisnik");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MjestoPrebivalista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zvanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Kandidati");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Kompanija", b =>
                {
                    b.HasBaseType("JobSearchingWebApp.Models.Korisnik");

                    b.Property<string>("BrojZaposlenih")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaOsnivanja")
                        .HasColumnType("int");

                    b.Property<string>("KratkiOpis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Kompanije");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.AutentifikacijaToken", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVJezici", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Jezik", "Jezik")
                        .WithMany()
                        .HasForeignKey("JezikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Jezik");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVTehnologije", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Tehnologija", "Tehnologija")
                        .WithMany()
                        .HasForeignKey("TehnologijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Tehnologija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.CVVjestine", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Vjestina", "Vjestina")
                        .WithMany()
                        .HasForeignKey("VjestinaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Vjestina");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatSpaseneKompanije", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Kompanija", "Kompanija")
                        .WithMany("KandidatSpaseneKompanije")
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatSpaseniOglasi", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Oglas", "Oglas")
                        .WithMany("KandidatSpaseniOglasi")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KandidatiOglasi", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Oglas", "Oglas")
                        .WithMany()
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KompanijaLokacija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kompanija", "Kompanija")
                        .WithMany("KompanijaLokacija")
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Lokacija", "Lokacija")
                        .WithMany("KompanijaLokacija")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kompanija");

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KompanijeKandidati", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kandidat", "Kandidat")
                        .WithMany()
                        .HasForeignKey("KandidatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Kompanija", "Kompanija")
                        .WithMany()
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kandidat");

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Korisnik", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.KorisnikNotifikacije", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Notifikacija", "Notifikacija")
                        .WithMany()
                        .HasForeignKey("NotifikacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Notifikacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Oglas", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Kompanija", "Kompanija")
                        .WithMany("Oglasi")
                        .HasForeignKey("KompanijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kompanija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OglasIskustvo", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Iskustvo", "Iskustvo")
                        .WithMany("OglasIskustvo")
                        .HasForeignKey("IskustvoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Oglas", "Oglas")
                        .WithMany("OglasIskustvo")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Iskustvo");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OglasLokacija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Lokacija", "Lokacija")
                        .WithMany("OglasLokacija")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Oglas", "Oglas")
                        .WithMany("OglasLokacija")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lokacija");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.OpisOglas", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Oglas", "Oglas")
                        .WithOne("OpisOglas")
                        .HasForeignKey("JobSearchingWebApp.Models.OpisOglas", "OglasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.RadnoIskustvo", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CV");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Recenzija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Kandidat", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("JobSearchingWebApp.Models.Kandidat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Kompanija", b =>
                {
                    b.HasOne("JobSearchingWebApp.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("JobSearchingWebApp.Models.Kompanija", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Iskustvo", b =>
                {
                    b.Navigation("OglasIskustvo");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Lokacija", b =>
                {
                    b.Navigation("KompanijaLokacija");

                    b.Navigation("OglasLokacija");
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Oglas", b =>
                {
                    b.Navigation("KandidatSpaseniOglasi");

                    b.Navigation("OglasIskustvo");

                    b.Navigation("OglasLokacija");

                    b.Navigation("OpisOglas")
                        .IsRequired();
                });

            modelBuilder.Entity("JobSearchingWebApp.Models.Kompanija", b =>
                {
                    b.Navigation("KandidatSpaseneKompanije");

                    b.Navigation("KompanijaLokacija");

                    b.Navigation("Oglasi");
                });
#pragma warning restore 612, 618
        }
    }
}
